// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: egg.proto

package note_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EggNutritionClient is the client API for EggNutrition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EggNutritionClient interface {
	AddMeal(ctx context.Context, in *AddMealRequest, opts ...grpc.CallOption) (*AddMealResponse, error)
	RemoveMeal(ctx context.Context, in *RemoveMealRequest, opts ...grpc.CallOption) (*RemoveMealResponse, error)
	GetMeal(ctx context.Context, in *GetMealRequest, opts ...grpc.CallOption) (*GetMealResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	UpdateMeal(ctx context.Context, in *UpdateMealRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type eggNutritionClient struct {
	cc grpc.ClientConnInterface
}

func NewEggNutritionClient(cc grpc.ClientConnInterface) EggNutritionClient {
	return &eggNutritionClient{cc}
}

func (c *eggNutritionClient) AddMeal(ctx context.Context, in *AddMealRequest, opts ...grpc.CallOption) (*AddMealResponse, error) {
	out := new(AddMealResponse)
	err := c.cc.Invoke(ctx, "/EggNutrition/AddMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eggNutritionClient) RemoveMeal(ctx context.Context, in *RemoveMealRequest, opts ...grpc.CallOption) (*RemoveMealResponse, error) {
	out := new(RemoveMealResponse)
	err := c.cc.Invoke(ctx, "/EggNutrition/RemoveMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eggNutritionClient) GetMeal(ctx context.Context, in *GetMealRequest, opts ...grpc.CallOption) (*GetMealResponse, error) {
	out := new(GetMealResponse)
	err := c.cc.Invoke(ctx, "/EggNutrition/GetMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eggNutritionClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/EggNutrition/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eggNutritionClient) UpdateMeal(ctx context.Context, in *UpdateMealRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/EggNutrition/UpdateMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EggNutritionServer is the server API for EggNutrition service.
// All implementations must embed UnimplementedEggNutritionServer
// for forward compatibility
type EggNutritionServer interface {
	AddMeal(context.Context, *AddMealRequest) (*AddMealResponse, error)
	RemoveMeal(context.Context, *RemoveMealRequest) (*RemoveMealResponse, error)
	GetMeal(context.Context, *GetMealRequest) (*GetMealResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	UpdateMeal(context.Context, *UpdateMealRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEggNutritionServer()
}

// UnimplementedEggNutritionServer must be embedded to have forward compatible implementations.
type UnimplementedEggNutritionServer struct {
}

func (UnimplementedEggNutritionServer) AddMeal(context.Context, *AddMealRequest) (*AddMealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMeal not implemented")
}
func (UnimplementedEggNutritionServer) RemoveMeal(context.Context, *RemoveMealRequest) (*RemoveMealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMeal not implemented")
}
func (UnimplementedEggNutritionServer) GetMeal(context.Context, *GetMealRequest) (*GetMealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeal not implemented")
}
func (UnimplementedEggNutritionServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedEggNutritionServer) UpdateMeal(context.Context, *UpdateMealRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeal not implemented")
}
func (UnimplementedEggNutritionServer) mustEmbedUnimplementedEggNutritionServer() {}

// UnsafeEggNutritionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EggNutritionServer will
// result in compilation errors.
type UnsafeEggNutritionServer interface {
	mustEmbedUnimplementedEggNutritionServer()
}

func RegisterEggNutritionServer(s grpc.ServiceRegistrar, srv EggNutritionServer) {
	s.RegisterService(&EggNutrition_ServiceDesc, srv)
}

func _EggNutrition_AddMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EggNutritionServer).AddMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EggNutrition/AddMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EggNutritionServer).AddMeal(ctx, req.(*AddMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EggNutrition_RemoveMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EggNutritionServer).RemoveMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EggNutrition/RemoveMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EggNutritionServer).RemoveMeal(ctx, req.(*RemoveMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EggNutrition_GetMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EggNutritionServer).GetMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EggNutrition/GetMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EggNutritionServer).GetMeal(ctx, req.(*GetMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EggNutrition_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EggNutritionServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EggNutrition/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EggNutritionServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EggNutrition_UpdateMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EggNutritionServer).UpdateMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EggNutrition/UpdateMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EggNutritionServer).UpdateMeal(ctx, req.(*UpdateMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EggNutrition_ServiceDesc is the grpc.ServiceDesc for EggNutrition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EggNutrition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EggNutrition",
	HandlerType: (*EggNutritionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMeal",
			Handler:    _EggNutrition_AddMeal_Handler,
		},
		{
			MethodName: "RemoveMeal",
			Handler:    _EggNutrition_RemoveMeal_Handler,
		},
		{
			MethodName: "GetMeal",
			Handler:    _EggNutrition_GetMeal_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _EggNutrition_GetList_Handler,
		},
		{
			MethodName: "UpdateMeal",
			Handler:    _EggNutrition_UpdateMeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egg.proto",
}
